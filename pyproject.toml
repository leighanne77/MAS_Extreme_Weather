[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "multi_agent_system"
version = "0.1.0"
description = "Multi-agent system for extreme weather risk analysis and nature-based solutions"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "MAS Climate Team", email = "team@masclimate.com"}
]
keywords = ["climate", "risk", "multi-agent", "weather", "finance", "sustainability"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Office/Business :: Financial :: Investment",
]

dependencies = [
    # Core scientific dependencies
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "matplotlib>=3.8.0",
    "seaborn>=0.13.0",
    "xarray>=2024.1.0",
    "netCDF4>=1.6.5",
    "scipy>=1.12.0",
    "scikit-learn>=1.4.0",
    "cartopy>=0.22.0",
    "cfgrib>=0.9.11.0",
    "eccodes>=1.6.1",
    "pyproj>=3.6.1",
    "requests>=2.31.0",
    
    # Google ADK and AI Platform
    "google-adk>=0.1.0",
    "google-cloud-aiplatform[agent-engines]>=1.95.1",
    "google-cloud-core>=2.4.0",
    "google-api-core>=2.17.0",
    "google-auth>=2.27.0",
    "google-cloud-storage>=2.14.0",
    "google-generativeai>=0.3.0",
    "vertexai>=0.0.1",
    
    # Web framework
    "fastapi>=0.68.0",
    "jinja2>=3.0.0",
    "uvicorn>=0.15.0",
    "pydantic>=2.0.0",
    "python-multipart>=0.0.5",
    
    # Async and utilities
    "aiofiles>=23.0.0",
    "aiohttp>=3.9.0",
    "asyncio>=3.4.3",
    "typing-extensions>=4.0.0",
    "python-dotenv>=1.0.0",
    
    # Database
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "psycopg2-binary>=2.9.0",
    
    # Visualization
    "plotly>=5.18.0",
    "dash>=2.14.0",
    "dash-bootstrap-components>=1.5.0",
    "networkx>=3.0.0",
    
    # Security
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "cryptography>=41.0.0",
    "pyjwt>=2.8.0",
    "bcrypt>=4.1.2",
    
    # Monitoring and logging
    "prometheus-client>=0.12.0",
    "python-json-logger>=2.0.0",
    "structlog>=21.5.0",
    
    # Utilities
    "python-dateutil>=2.8.2",
    "pytz>=2021.3",
    "tenacity>=8.0.0",
    "cachetools>=5.0.0",
    "jsonschema>=4.0.0",
    
    # Data processing
    "great-expectations>=0.18.0",
    "polars>=0.20.0",
    "pyarrow>=14.0.0",
    "fastparquet>=2023.0.0",
    
    # Google Cloud services
    "google-cloud-bigquery>=3.0.0",
    "google-cloud-firestore>=2.0.0",
    "google-cloud-pubsub>=2.0.0",
]

[project.optional-dependencies]
dev = [
    # Development and testing
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
    "pytest-xdist>=2.5.0",
    "pytest-benchmark>=5.1.0",
    "coverage>=6.3.0",
    
    # Code quality
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=4.0.0",
    "mypy>=1.0.0",
    "pylint>=3.1.0",
    "ruff>=0.1.0",
    "pre-commit>=2.17.0",
    
    # Documentation
    "mkdocs>=1.2.0",
    "mkdocs-material>=8.0.0",
    "mkdocstrings>=0.18.0",
    "graphviz>=0.19.0",
]

performance = [
    # Performance testing
    "locust>=2.17.0",
    "psutil>=5.9.6",
    "memory-profiler>=0.61.0",
    "py-spy>=0.3.14",
    "redis>=5.0.1",
]

[project.urls]
Homepage = "https://github.com/leighanne77/MAS_Extreme_Weather"
Documentation = "https://masclimate.com/docs"
Repository = "https://github.com/leighanne77/MAS_Extreme_Weather.git"
"Bug Tracker" = "https://github.com/leighanne77/MAS_Extreme_Weather/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.yaml", "*.yml", "*.md"]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["multi_agent_system", "pythia_web", "agentic_data_management"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
